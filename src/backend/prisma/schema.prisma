// This file is part of NER's PM Dashboard and licensed under GNU AGPLv3.
// See the LICENSE file in the repository root folder for details.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CR_Type {
  DESIGN_ISSUE
  NEW_FUNCTION
  OTHER
  STAGE_GATE
  WP_ACTIVATION
}

enum WBS_Element_Status {
  INACTIVE
  ACTIVE
  COMPLETE
}

enum Role {
  APP_ADMIN
  ADMIN
  LEADERSHIP
  PROJECT_MANAGER
  PROJECT_LEAD
  MEMBER
  GUEST
}

enum Scope_CR_Why_Type {
  ESTIMATION
  SCHOOL
  MANUFACTURING
  RULES
  OTHER_PROJECT
  OTHER
}

model User {
  userId                 Int              @id @default(autoincrement())
  firstName              String
  lastName               String
  emailId                String           @unique
  firstLogin             DateTime         @default(now())
  lastLogin              DateTime         @default(now())
  role                   Role             @default(GUEST)
  changeRequests         Change_Request[]
  markedAsProjectLead    Activation_CR[]  @relation(name: "markAsProjectLead")
  markedAsProjectManager Activation_CR[]  @relation(name: "markAsProjectManager")
  changes                Change[]
  projectLead            WBS_Element[]    @relation(name: "projectLead")
  projectManager         WBS_Element[]    @relation(name: "projectManager")
}

model Change_Request {
  crId                    Int            @id @default(autoincrement())
  submitterId             Int
  submitter               User           @relation(fields: [submitterId], references: [userId])
  dateSubmitted           DateTime       @default(now())
  wbsElementId            Int
  wbsElement              WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  type                    CR_Type
  dateReviewed            DateTime?
  accepted                Boolean?
  reviewNotes             String?
  changes                 Change[]
  scopeChangeRequest      Scope_CR?
  stageGateChangeRequest  Stage_Gate_CR?
  activationChangeRequest Activation_CR?
}

model Scope_CR {
  scopeCrId       Int            @id @default(autoincrement())
  changeRequestId Int
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  what            String
  why             Scope_CR_Why[]
  scopeImpact     String
  timelineImpact  Int
  budgetImpact    Int
}

model Scope_CR_Why {
  scopeCrWhyId Int               @id @default(autoincrement())
  scopeCrId    Int
  scopeCr      Scope_CR          @relation(fields: [scopeCrId], references: [scopeCrId])
  type         Scope_CR_Why_Type
  explain      String
}

model Stage_Gate_CR {
  stageGateCrId   Int            @id @default(autoincrement())
  changeRequestId Int
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  leftoverBudget  Int
  confirmDone     Boolean
}

model Activation_CR {
  activationCrId   Int            @id @default(autoincrement())
  changeRequestId  Int
  changeRequest    Change_Request @relation(fields: [changeRequestId], references: [crId])
  projectLeadId    Int
  projectLead      User           @relation(name: "markAsProjectLead", fields: [projectLeadId], references: [userId])
  projectManagerId Int
  projectManager   User           @relation(name: "markAsProjectManager", fields: [projectManagerId], references: [userId])
  startDate        DateTime
  confirmDetails   Boolean
}

model Change {
  changeId        Int            @id @default(autoincrement())
  changeRequestId Int
  changeRequest   Change_Request @relation(fields: [changeRequestId], references: [crId])
  dateImplemented DateTime       @default(now())
  implementorId   Int
  implementor     User           @relation(fields: [implementorId], references: [userId])
  wbsElementId    Int
  wbsElement      WBS_Element    @relation(fields: [wbsElementId], references: [wbsElementId])
  detail          String
}

model WBS_Element {
  wbsElementId          Int                @id @default(autoincrement())
  dateCreated           DateTime           @default(now())
  carNumber             Int
  projectNumber         Int
  workPackageNumber     Int
  name                  String
  status                WBS_Element_Status
  projectLeadId         Int
  projectLead           User               @relation(name: "projectLead", fields: [projectLeadId], references: [userId])
  projectManagerId      Int
  projectManager        User               @relation(name: "projectManager", fields: [projectManagerId], references: [userId])
  changeRequests        Change_Request[]
  changes               Change[]
  project               Project?
  workPackage           Work_Package?
  dependentWorkPackages Work_Package[]     @relation("dependencies")

  @@unique([carNumber, projectNumber, workPackageNumber], name: "wbsNumber")
}

model Project {
  projectId             Int                  @id @default(autoincrement())
  wbsElementId          Int
  wbsElement            WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  googleDriveFolderLink String
  slideDeckLink         String
  bomLink               String
  taskListLink          String
  rules                 String[]
  otherConstraints      Description_Bullet[]
  workPackages          Work_Package[]
}

model Work_Package {
  workPackageId      Int                  @id @default(autoincrement())
  wbsElementId       Int
  wbsElement         WBS_Element          @relation(fields: [wbsElementId], references: [wbsElementId])
  projectId          Int
  project            Project              @relation(fields: [projectId], references: [projectId])
  orderInProject     Int
  startDate          DateTime
  progress           Int
  duration           Int
  budget             Int
  dependencies       WBS_Element[]        @relation(name: "dependencies")
  deliverables       String
  descriptionBullets Description_Bullet[]
}

model Description_Bullet {
  descriptionId Int           @id @default(autoincrement())
  projectId     Int?
  project       Project?      @relation(fields: [projectId], references: [projectId])
  workPackageId Int?
  workPackage   Work_Package? @relation(fields: [workPackageId], references: [workPackageId])
  dateAdded     DateTime      @default(now())
  dateDeleted   DateTime?
  detail        String
}
